スレッド構成
============

RushHourは下記3種類のスレッドが動きます。

* ゲーム進行スレッド
* 経路探索スレッド
* ユーザ応答スレッド

以下の要件をみたす必要があります。

* ユーザ操作時は即時レスポンスすること
* 経路探索中はゲーム進行が止まっていること
* ユーザ操作によるモデル変更時はゲーム進行が止まっていること
* ユーザ操作後、経路再探索が始まること
* ゲーム進行中は経路探索しないこと
* ゲーム進行中はモデル変更しないこと

実現方式
--------

即時レスポンスのため、ユーザ操作によるモデル変更要求はキューにためる。
ユーザに対し、即時モデル情報を送信できるよう、オブジェクトモデルを以下の4つに分ける

* 静的オブジェクト
* エージェントオブジェクト
* モデル変更キュー
* 経路テンプレート情報

クライアント表示に必要な情報を静的オブジェクトと呼ぶ。
経路情報はエージェントオブジェクトに持たせる。

ロック
------

.. csv-table::
    :header: 操作, 静的, エージェント, キュー, 経路テンプレ

    ユーザ表示要求, R, \-, R, \-
    ユーザ変更要求, \-, \-, W, \-
    モデル変更    , W, W, W, W
    ゲーム進行    , W, W, \-, \-
    経路探索      , R, W, \-, W

即時レスポンスが要求される、静的オブジェクトのWriteLockは極力短時間にすます必要がある。
そのため、モデル変更とゲーム進行の長時間化を防ぐ必要がある。
