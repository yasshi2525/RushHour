スレッド構成
============

RushHourは下記4種類のスレッドが動きます。

* ゲーム進行スレッド
* モデル変更(経路探索)スレッド
* ユーザ応答スレッド
* バックアップスレッド

以下の要件をみたす必要があります。

* ユーザ操作時は即時レスポンスすること
* 経路探索中はゲーム進行が止まっていること
* ユーザ操作によるモデル変更時はゲーム進行が止まっていること
* ユーザ操作後、経路再探索が始まること
* ゲーム進行中は経路探索しないこと
* ゲーム進行中はモデル変更しないこと
* バックアップ中はゲームを進行しないこと

実現方式
--------

即時レスポンスのため、ユーザ操作によるモデル変更要求はキューにためます。
ユーザに対し、即時モデル情報を送信できるよう、オブジェクトモデルを以下の3つに分けます。

* 静的オブジェクト
* エージェントオブジェクト
* 経路テンプレート情報

クライアント表示に必要な情報を静的オブジェクトと呼びます(長期ロック不可)。
経路情報はエージェントオブジェクトに持たせます(長期ロック可)。

ロック
------

.. csv-table::
    :header: 操作, 静的, エージェント, 変更キュー, 経路テンプレ

    ユーザ表示要求, R, \-, \-, \-
    ユーザ変更要求, \-, \-, W, \-
    モデル変更    , W, W, W, W
    ゲーム進行    , W, W, \-, \-
    経路探索      , R, R, \-, W
    経路反映      , \-, W, \-, R
    DBバックアップ, R, R, \-, \-
    DBリストア    , W, W, \-, \-

即時レスポンスが要求される、静的オブジェクトのWriteLockは極力短時間にすます必要があります。
そのため、モデル変更とゲーム進行の長時間化を防ぐ必要があります。

.. seqdiag::

    seqdiag {
        ユーザ => ユーザ応答スレッド [label = "モデル表示()"];
        ユーザ -> ユーザ応答スレッド [label = "モデル変更()"];
        ユーザ応答スレッド ->> モデル変更スレッド [label = "モデル変更()"];
        ユーザ <--ユーザ応答スレッド;
        モデル変更スレッド => モデル変更スレッド [label = "経路探索()"];
        モデル変更スレッド => モデル変更スレッド [label = "経路反映()"];
    }

